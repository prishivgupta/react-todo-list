{"version":3,"sources":["components/form.js","components/todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","className","onChange","event","setInputText","target","value","inputText","type","onClick","preventDefault","setTodos","todos","text","completed","id","Math","random","name","setStatus","Todo","todo","map","filter","t","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sNA6DeA,EA1DF,SAACC,GAwBV,OAEI,6BAEI,8BAEI,2BAAOC,UAAU,aAAaC,SA5Bf,SAACC,GAExBH,EAAMI,aAAaD,EAAME,OAAOC,QA0BoCA,MAAON,EAAMO,UAAWC,KAAK,SACzF,4BAAQP,UAAU,cAAcQ,QAvBtB,SAACN,GAEnBA,EAAMO,iBAENV,EAAMW,SAAN,sBAAmBX,EAAMY,OAAzB,CAAgC,CAAEC,KAAMb,EAAMO,UAAWO,WAAW,EAAOC,GAAoB,IAAhBC,KAAKC,aAEpFjB,EAAMI,aAAa,KAiB6CI,KAAK,UACzD,uBAAGP,UAAU,wBAGjB,yBAAKA,UAAU,UAEX,4BAAQiB,KAAK,QAAQjB,UAAU,cAAcC,SAnBxC,SAACC,GAElBH,EAAMmB,UAAUhB,EAAME,OAAOC,SAmBb,4BAAQA,MAAM,OAAd,OACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,eAAd,oB,OCITc,EA7CF,SAACpB,GAwBV,OAEI,yBAAKC,UAAU,QAEX,wBAAIA,UAAS,oBAAeD,EAAMqB,KAAKP,UAAY,YAAc,KAC5Dd,EAAMa,MAGX,4BAAQZ,UAAU,eAAeQ,QAxBjB,WAEpBT,EAAMW,SAASX,EAAMY,MAAMU,KAAI,SAAAD,GAE3B,OAAGA,EAAKN,KAAOf,EAAMqB,KAAKN,GACf,2BACAM,GADP,IACaP,WAAYO,EAAKP,YAI3BO,QAeH,uBAAGpB,UAAU,kBAEjB,4BAAQA,UAAU,YAAYQ,QAjChB,WAElBT,EAAMW,SAASX,EAAMY,MAAMW,QAAO,SAAAC,GAAC,OAAKA,EAAET,KAAOf,EAAMqB,KAAKN,SAgCpD,uBAAGd,UAAU,oBCfdwB,EApBE,SAACzB,GAEd,OAEI,yBAAKC,UAAU,kBAEX,wBAAIA,UAAU,aAETD,EAAM0B,cAAcJ,KAAI,SAAAD,GACrB,OAAO,kBAAC,EAAD,CAAMR,KAAMQ,EAAKR,KAAMc,IAAKN,EAAKN,GAAIJ,SAAUX,EAAMW,SAAUC,MAAOZ,EAAMY,MAAOS,KAAMA,UCkErGO,MAzEf,WAAgB,IAAD,EAEqBC,mBAAS,IAF9B,mBAENtB,EAFM,KAEKH,EAFL,OAGayB,mBAAS,IAHtB,mBAGNjB,EAHM,KAGCD,EAHD,OAIekB,mBAAS,OAJxB,mBAINC,EAJM,KAIEX,EAJF,OAK6BU,mBAAS,IALtC,mBAKNH,EALM,KAKSK,EALT,KAObC,qBAAU,WAERC,MAEC,IAEHD,qBAAU,WAERE,IACAC,MAEC,CAACvB,EAAMkB,IAEV,IAAMI,EAAgB,WAEpB,OAAQJ,GAEN,IAAK,YACHC,EAAiBnB,EAAMW,QAAO,SAAAF,GAAI,OAAuB,IAAnBA,EAAKP,cAC3C,MAEF,IAAK,cACHiB,EAAiBnB,EAAMW,QAAO,SAAAF,GAAI,OAAuB,IAAnBA,EAAKP,cAC3C,MAEF,QACEiB,EAAiBnB,KAOjBuB,EAAiB,WAErBC,aAAaC,QAAQ,QAASC,KAAKC,UAAU3B,KAIzCqB,EAAgB,WAEpB,GAAqC,OAAlCG,aAAaI,QAAQ,SACtBJ,aAAaC,QAAQ,QAASC,KAAKC,UAAU,SACxC,CACL,IAAME,EAAYH,KAAKI,MAAMN,aAAaI,QAAQ,UAClD7B,EAAS8B,KAKb,OAEE,yBAAKxC,UAAU,OAEb,0CAEA,kBAAC,EAAD,CAAMM,UAAWA,EAAWH,aAAcA,EAAcO,SAAUA,EAAUC,MAAOA,EAAOkB,OAAQA,EAAQX,UAAWA,IAErH,kBAAC,EAAD,CAAUO,cAAeA,EAAef,SAAUA,EAAUC,MAAOA,MC3DrD+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.cf01a65b.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Form = (props) => {\r\n\r\n    const inputChangeHandler = (event) => {\r\n\r\n        props.setInputText(event.target.value);\r\n\r\n    }\r\n    \r\n    const submitHandler = (event) => {\r\n\r\n        event.preventDefault();\r\n\r\n        props.setTodos([...props.todos, { text: props.inputText, completed: false, id: Math.random() * 1000 }]);\r\n\r\n        props.setInputText(\"\");\r\n\r\n    }\r\n\r\n    const stateHandler = (event) => {\r\n\r\n        props.setStatus(event.target.value);\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div>\r\n\r\n            <form>\r\n\r\n                <input className=\"todo-input\" onChange={inputChangeHandler} value={props.inputText} type=\"text\"></input>\r\n                <button className=\"todo-button\" onClick={submitHandler} type=\"submit\">\r\n                    <i className=\"fas fa-plus-square\"></i>\r\n                </button>\r\n\r\n                <div className=\"select\">\r\n\r\n                    <select name=\"todos\" className=\"filter-todo\" onChange={stateHandler}>\r\n\r\n                        <option value=\"all\">All</option>\r\n                        <option value=\"completed\">Completed</option>\r\n                        <option value=\"uncompleted\">Uncompleted</option>\r\n\r\n                    </select>\r\n\r\n                </div>\r\n\r\n                \r\n\r\n            </form>\r\n\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport '../App.css';\r\n\r\nconst Todo = (props) => {\r\n\r\n    const deleteHandler = () => {\r\n\r\n        props.setTodos(props.todos.filter(t => (t.id !== props.todo.id)));\r\n\r\n    }\r\n\r\n    const completeHandler = () => {\r\n\r\n        props.setTodos(props.todos.map(todo => {\r\n\r\n            if(todo.id === props.todo.id) {\r\n                return {\r\n                    ...todo, completed: !todo.completed\r\n                };\r\n            }\r\n\r\n            return todo;\r\n\r\n        }))\r\n\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"todo\">\r\n\r\n            <li className={`todo-item ${props.todo.completed ? \"completed\" : '' }`}>\r\n                {props.text}\r\n            </li>\r\n\r\n            <button className=\"complete-btn\" onClick={completeHandler}>\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button className=\"trash-btn\" onClick={deleteHandler}>\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\nimport '../App.css';\r\nimport Todo from './todo';\r\n\r\nconst TodoList = (props) => {\r\n\r\n    return (\r\n\r\n        <div className=\"todo-container\">\r\n\r\n            <ul className=\"todo-list\">\r\n\r\n                {props.filteredTodos.map(todo => {\r\n                    return <Todo text={todo.text} key={todo.id} setTodos={props.setTodos} todos={props.todos} todo={todo}/>;\r\n                })}\r\n\r\n            </ul>\r\n\r\n        </div>\r\n\r\n    );\r\n\r\n}\r\n\r\nexport default TodoList;","import React, {useState, useeffect, useEffect} from 'react';\nimport './App.css';\nimport Form from './components/form';\nimport TodoList from './components/TodoList';\n\n\nfunction App() {\n\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState(\"all\");\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  useEffect(() => {\n\n    getLocalTodos();\n\n  }, [] );\n\n  useEffect(() => {\n\n    filterHandler();\n    saveLocalTodos();\n\n  }, [todos,status] );\n\n  const filterHandler = () => {\n\n    switch (status) {\n\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n\n      default:\n        setFilteredTodos(todos);\n        break;\n\n    }\n\n  }\n\n  const saveLocalTodos = () => {\n\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\n\n  }\n\n  const getLocalTodos = () => {\n\n    if(localStorage.getItem(\"todos\") === null) {\n      localStorage.setItem(\"todos\", JSON.stringify([]));\n    } else {\n      const todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n\n  }\n\n  return (\n\n    <div className=\"App\">\n      \n      <h1>TO DO LIST</h1>\n\n      <Form inputText={inputText} setInputText={setInputText} setTodos={setTodos} todos={todos} status={status} setStatus={setStatus}/>\n\n      <TodoList filteredTodos={filteredTodos} setTodos={setTodos} todos={todos}/>\n\n    </div>\n\n  );\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}